name: Deployment from Github to AWS
on:
  push:
    branches:
      - main
      - infrastructure
  pull_request:
    branches:
      - main

env:
  AWS_REGION: eu-central-1

jobs:
#  continuous-integration:
#    runs-on: ubuntu-latest
#    steps:
#      - name: "Checkout source code"
#        uses: actions/checkout@v2
#
#      - name: "Build and run container"
#        run: docker-compose up -d --build
#
#      - name: "Sleep for 30 seconds"
#        uses: jakejarvis/wait-action@master
#        with:
#          time: '30s'
#
#      - name: "Run tests"
#        run: docker-compose exec -T django pytest
#
#      - name: "Stop containers"
#        run: docker-compose down

  build-and-push:
#    needs: continuous-integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push django image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ams/django
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/django/Dockerfile ./docker/django
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push redis image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ams/redis
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/redis/Dockerfile ./docker/redis
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push postgres image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ams/postgresql
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/postgres/Dockerfile ./docker/postgres
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push celery image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ams/celery
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/celery/Dockerfile ./docker/celery
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build and push celery-beat image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ams/celery
        run: |
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/celery-beat/Dockerfile ./docker/celery-beat
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
